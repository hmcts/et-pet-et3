# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

name: $(SourceBranchName)-$(Build.SourceVersion)$(rev:.r)

trigger:
  batch: true
  branches:
    include:
      - master
      - staging
      - develop
pr:
  autoCancel: true
  branches:
    include:
      - master
      - staging
      - develop
      - feature/*

variables:
  application.name: 'et3'

jobs:
  # - job: TestApplication
  #   pool:
  #     vmImage: 'Ubuntu-16.04'
  #   steps:

  #   - task: UseRubyVersion@0
  #     inputs:
  #       versionSpec: '>= 2.5'

  #   - script: |
  #       sudo apt-get install libpq-dev
  #       hmod +x ./bin/wait-for-it.sh
  #       gem install bundler -v 1.16.4
  #     displayName: 'before install'

  #   - script: |
  #       export DB_PORT=5433
  #       export S3_PORT=9000
  #       export CC_TEST_REPORTER_ID=adf7487514f01c0e5d3274c0f0351f946b792aadc1978f99ec099fd9a3a01b0d
  #       curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  #       chmod +x ./cc-test-reporter
  #       ./cc-test-reporter before-build
  #       ./bin/dev/docker-support-services up -d
  #       ./bin/wait-for-it.sh localhost:5433
  #       sleep 5
  #       ./bin/wait-for-it.sh localhost:5433
  #       ./bin/wait-for-it.sh localhost:9000
  #       bundle install --retry=3 --jobs=4
  #       bundle exec rspec:install
  #       RAILS_ENV=test bundle exec rake parallel:create parallel:migrate
  #     displayName: 'before script'

  #   - script: |
  #       export DB_PORT=5433
  #       export S3_PORT=9000
  #       RAILS_ENV=test bundle exec rake parallel:spec
  #       RAILS_ENV=test TEST_LOCALE=cy bundle exec rake parallel:spec
  #       curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  #       chmod +x ./cc-test-reporter
  #       # ./cc-test-reporter after-build --exit-code 0
  #     displayName: 'script'

  - job: ExtractAssets
  #  dependsOn: TestApplication
    pool:
      name: hmcts-pet  # name of the pool to run this job in
    steps:

    - bash: |
        repo_sha=$(git rev-parse --verify HEAD)
        docker_image_tag_sha=${repo_sha:0:7}
        echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(Build.SourceBranchName)${docker_image_tag_sha}"
      displayName: 'Get Docker Tag'
      name: 'getDockerTagTemp'

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        imageName: '$(application.name):$(getDockerTagTemp.DOCKER_TAG)'

    - task: Docker@1
      displayName: 'Run an image'
      inputs:
        command: 'Run an image'
        imageName: '$(application.name):$(getDockerTagTemp.DOCKER_TAG)'
        containerName: 'ASSET_CONTAINER'

    - bash: |
        mkdir -p temp_assets
        docker cp ASSET_CONTAINER:/usr/src/app/public/assets ./temp_assets
        docker stop ASSET_CONTAINER
        cd temp_assets/assets
        az storage blob upload-batch -d assets --account-name $(AZURE_STORAGE_ACCOUNT) -s .
        docker rm ASSET_CONTAINER
        cd ../../ && rm -rf temp_assets
      displayName: 'Get Docker Tag'
      name: 'getDockerTag'

  - job: PushImage
    dependsOn: ExtractAssets
    pool:
      name: hmcts-pet  # name of the pool to run this job in
    steps:

    - bash: |
        repo_sha=$(git rev-parse --verify HEAD)
        docker_image_tag_sha=${repo_sha:0:7}
        echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(Build.SourceBranchName)-${docker_image_tag_sha}"
      displayName: 'Get Docker Tag'
      name: 'getDockerTag'

    - task: Docker@1
      displayName: login
      inputs:
        azureSubscriptionEndpoint: 'hmcts-pet'
        azureContainerRegistry: employmenttribunal.azurecr.io
        command: login

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

    - task: Docker@1
      displayName: 'Tag image'
      inputs:
        azureSubscriptionEndpoint: 'hmcts-pet'
        azureContainerRegistry: employmenttribunal.azurecr.io
        command: 'Tag image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
    
    - task: Docker@1
      displayName: 'Push an image'
      inputs:
        azureSubscriptionEndpoint: 'hmcts-pet'
        azureContainerRegistry: employmenttribunal.azurecr.io
        command: 'Push an image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

    - task: Docker@1
      displayName: logout
      inputs:
        command: logout



